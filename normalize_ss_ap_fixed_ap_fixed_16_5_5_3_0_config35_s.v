// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_ss_ap_fixed_ap_fixed_16_5_5_3_0_config35_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [11:0] i_fu_2297_p2;
reg   [11:0] i_reg_2482;
wire    ap_CS_fsm_state2;
wire   [4:0] trunc_ln97_fu_2303_p1;
reg   [4:0] trunc_ln97_reg_2487;
wire   [0:0] icmp_ln85_fu_2291_p2;
reg   [15:0] out_data_V_reg_2493;
reg   [11:0] i_0_reg_225;
reg    ap_block_state1;
wire  signed [15:0] mul_ln1265_fu_496_p0;
wire   [15:0] mul_ln1265_fu_496_p1;
wire   [15:0] tmp_13_fu_2307_p34;
wire   [15:0] p_Val2_s_fu_2386_p34;
wire   [26:0] mul_ln1265_fu_496_p2;
wire   [26:0] rhs_V_fu_2455_p3;
wire   [26:0] ret_V_fu_2463_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
wire   [26:0] mul_ln1265_fu_496_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

myproject_mux_325_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
myproject_mux_325_16_1_1_U182(
    .din0(16'd7685),
    .din1(16'd5753),
    .din2(16'd9291),
    .din3(16'd9384),
    .din4(16'd6570),
    .din5(16'd6066),
    .din6(16'd8747),
    .din7(16'd7476),
    .din8(16'd5385),
    .din9(16'd9534),
    .din10(16'd6939),
    .din11(16'd5024),
    .din12(16'd6904),
    .din13(16'd6569),
    .din14(16'd7677),
    .din15(16'd7786),
    .din16(16'd4490),
    .din17(16'd9098),
    .din18(16'd7558),
    .din19(16'd8045),
    .din20(16'd7079),
    .din21(16'd7347),
    .din22(16'd6863),
    .din23(16'd7953),
    .din24(16'd5179),
    .din25(16'd4635),
    .din26(16'd9707),
    .din27(16'd5479),
    .din28(16'd6570),
    .din29(16'd7065),
    .din30(16'd6373),
    .din31(16'd3817),
    .din32(trunc_ln97_reg_2487),
    .dout(tmp_13_fu_2307_p34)
);

myproject_mux_325_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 16 ))
myproject_mux_325_16_1_1_U183(
    .din0(16'd500),
    .din1(16'd64096),
    .din2(16'd63833),
    .din3(16'd62778),
    .din4(16'd64376),
    .din5(16'd65340),
    .din6(16'd64146),
    .din7(16'd1084),
    .din8(16'd3033),
    .din9(16'd63666),
    .din10(16'd63897),
    .din11(16'd65480),
    .din12(16'd62029),
    .din13(16'd63921),
    .din14(16'd65257),
    .din15(16'd64836),
    .din16(16'd1124),
    .din17(16'd64419),
    .din18(16'd64189),
    .din19(16'd65361),
    .din20(16'd65495),
    .din21(16'd64681),
    .din22(16'd335),
    .din23(16'd62927),
    .din24(16'd62251),
    .din25(16'd64641),
    .din26(16'd63770),
    .din27(16'd64712),
    .din28(16'd64367),
    .din29(16'd339),
    .din30(16'd64211),
    .din31(16'd607),
    .din32(trunc_ln97_reg_2487),
    .dout(p_Val2_s_fu_2386_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_225 <= i_reg_2482;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_225 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_2482 <= i_fu_2297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_V_reg_2493 <= {{ret_V_fu_2463_p2[26:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_2291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln97_reg_2487 <= trunc_ln97_fu_2303_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln85_fu_2291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign i_fu_2297_p2 = (i_0_reg_225 + 12'd1);

assign icmp_ln85_fu_2291_p2 = ((i_0_reg_225 == 12'd2048) ? 1'b1 : 1'b0);

assign mul_ln1265_fu_496_p0 = data_V_V_dout;

assign mul_ln1265_fu_496_p1 = mul_ln1265_fu_496_p10;

assign mul_ln1265_fu_496_p10 = tmp_13_fu_2307_p34;

assign mul_ln1265_fu_496_p2 = ($signed(mul_ln1265_fu_496_p0) * $signed({{1'b0}, {mul_ln1265_fu_496_p1}}));

assign res_V_V_din = out_data_V_reg_2493;

assign ret_V_fu_2463_p2 = (mul_ln1265_fu_496_p2 + rhs_V_fu_2455_p3);

assign rhs_V_fu_2455_p3 = {{p_Val2_s_fu_2386_p34}, {11'd0}};

assign start_out = real_start;

assign trunc_ln97_fu_2303_p1 = i_0_reg_225[4:0];

endmodule //normalize_ss_ap_fixed_ap_fixed_16_5_5_3_0_config35_s
