// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pooling2d_cl_ss_ap_fixed_ap_fixed_16_5_5_3_0_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln631_fu_713_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln647_fu_752_p2;
reg    res_V_V_blk_n;
wire   [15:0] grp_fu_636_p3;
reg   [15:0] reg_644;
wire    ap_CS_fsm_state7;
reg    ap_block_state8;
reg    ap_block_state9;
reg    ap_block_state10;
reg    ap_block_state11;
reg    ap_block_state12;
reg    ap_block_state13;
reg    ap_block_state14;
reg    ap_block_state15;
reg    ap_block_state16;
reg    ap_block_state17;
reg    ap_block_state18;
reg    ap_block_state19;
reg    ap_block_state20;
reg    ap_block_state21;
reg    ap_block_state22;
reg    ap_block_state1;
wire   [5:0] i_fu_669_p2;
reg   [5:0] i_reg_1091;
wire    ap_CS_fsm_state2;
wire   [6:0] j_fu_681_p2;
reg   [6:0] j_reg_1099;
wire    ap_CS_fsm_state3;
wire   [0:0] trunc_ln203_fu_687_p1;
reg   [0:0] trunc_ln203_reg_1104;
wire   [0:0] icmp_ln630_fu_675_p2;
wire   [10:0] zext_ln631_fu_709_p1;
reg   [10:0] zext_ln631_reg_1108;
wire   [4:0] k_1_fu_719_p2;
reg    ap_block_state4;
wire   [5:0] j_1_fu_746_p2;
reg   [5:0] j_1_reg_1124;
wire    ap_CS_fsm_state5;
wire   [4:0] k_fu_758_p2;
reg    ap_block_state6;
wire   [9:0] tmp_5_fu_769_p3;
reg   [9:0] tmp_5_reg_1137;
reg   [8:0] memory1_0_V_address0;
reg    memory1_0_V_ce0;
reg    memory1_0_V_we0;
wire   [15:0] memory1_0_V_q0;
reg   [8:0] memory1_1_V_address0;
reg    memory1_1_V_ce0;
reg    memory1_1_V_we0;
wire   [15:0] memory1_1_V_q0;
reg   [3:0] memory2_V_address0;
reg    memory2_V_ce0;
reg    memory2_V_we0;
wire   [15:0] memory2_V_q0;
reg   [5:0] i_0_reg_560;
wire   [0:0] icmp_ln646_fu_740_p2;
reg   [6:0] j_0_reg_571;
wire   [0:0] icmp_ln628_fu_663_p2;
reg   [4:0] k_0_reg_582;
reg   [5:0] j7_0_reg_593;
reg    ap_block_state23;
reg   [4:0] k8_0_reg_605;
wire   [63:0] zext_ln203_2_fu_734_p1;
wire   [63:0] zext_ln650_fu_764_p1;
wire   [63:0] zext_ln203_1_fu_777_p1;
wire   [63:0] tmp_6_fu_788_p3;
wire   [63:0] tmp_7_fu_803_p3;
wire   [63:0] tmp_8_fu_818_p3;
wire   [63:0] tmp_9_fu_833_p3;
wire   [63:0] tmp_10_fu_848_p3;
wire   [63:0] tmp_11_fu_863_p3;
wire   [63:0] tmp_12_fu_878_p3;
wire   [63:0] tmp_13_fu_893_p3;
wire   [63:0] tmp_14_fu_908_p3;
wire   [63:0] tmp_15_fu_923_p3;
wire   [63:0] tmp_16_fu_938_p3;
wire   [63:0] tmp_17_fu_953_p3;
wire   [63:0] tmp_18_fu_968_p3;
wire   [63:0] tmp_19_fu_983_p3;
wire   [63:0] tmp_20_fu_998_p3;
wire   [0:0] grp_fu_616_p2;
wire   [15:0] grp_fu_622_p3;
wire   [0:0] grp_fu_630_p2;
wire   [0:0] grp_fu_648_p2;
wire   [5:0] lshr_ln_fu_691_p4;
wire   [9:0] tmp_fu_701_p3;
wire   [10:0] zext_ln203_fu_725_p1;
wire   [10:0] add_ln203_fu_729_p2;
wire   [9:0] or_ln203_fu_783_p2;
wire   [9:0] or_ln203_1_fu_798_p2;
wire   [9:0] or_ln203_2_fu_813_p2;
wire   [9:0] or_ln203_3_fu_828_p2;
wire   [9:0] or_ln203_4_fu_843_p2;
wire   [9:0] or_ln203_5_fu_858_p2;
wire   [9:0] or_ln203_6_fu_873_p2;
wire   [9:0] or_ln203_7_fu_888_p2;
wire   [9:0] or_ln203_8_fu_903_p2;
wire   [9:0] or_ln203_9_fu_918_p2;
wire   [9:0] or_ln203_10_fu_933_p2;
wire   [9:0] or_ln203_11_fu_948_p2;
wire   [9:0] or_ln203_12_fu_963_p2;
wire   [9:0] or_ln203_13_fu_978_p2;
wire   [9:0] or_ln203_14_fu_993_p2;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 23'd1;
end

pooling2d_cl_ss_ap_fixed_ap_fixed_16_5_5_3_0_config6_s_meg8j #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
memory1_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory1_0_V_address0),
    .ce0(memory1_0_V_ce0),
    .we0(memory1_0_V_we0),
    .d0(data_V_V_dout),
    .q0(memory1_0_V_q0)
);

pooling2d_cl_ss_ap_fixed_ap_fixed_16_5_5_3_0_config6_s_meg8j #(
    .DataWidth( 16 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
memory1_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory1_1_V_address0),
    .ce0(memory1_1_V_ce0),
    .we0(memory1_1_V_we0),
    .d0(data_V_V_dout),
    .q0(memory1_1_V_q0)
);

pooling2d_cl_ss_ap_fixed_ap_fixed_16_5_5_3_0_config6_s_meibs #(
    .DataWidth( 16 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
memory2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(memory2_V_address0),
    .ce0(memory2_V_ce0),
    .we0(memory2_V_we0),
    .d0(data_V_V_dout),
    .q0(memory2_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln628_fu_663_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln646_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_560 <= i_reg_1091;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_560 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        j7_0_reg_593 <= 6'd0;
    end else if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
        j7_0_reg_593 <= j_1_reg_1124;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln628_fu_663_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_571 <= 7'd0;
    end else if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_571 <= j_reg_1099;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln646_fu_740_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k8_0_reg_605 <= 5'd0;
    end else if ((~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        k8_0_reg_605 <= k_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_582 <= 5'd0;
    end else if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_582 <= k_1_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1091 <= i_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_1124 <= j_1_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_1099 <= j_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        reg_644 <= grp_fu_636_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln647_fu_752_p2 == 1'd1))) begin
        tmp_5_reg_1137[9 : 4] <= tmp_5_fu_769_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln630_fu_675_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln203_reg_1104 <= trunc_ln203_fu_687_p1;
        zext_ln631_reg_1108[9 : 4] <= zext_ln631_fu_709_p1[9 : 4];
    end
end

always @ (*) begin
    if (((icmp_ln628_fu_663_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | ((icmp_ln631_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln628_fu_663_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        memory1_0_V_address0 = tmp_20_fu_998_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory1_0_V_address0 = tmp_19_fu_983_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory1_0_V_address0 = tmp_18_fu_968_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory1_0_V_address0 = tmp_17_fu_953_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory1_0_V_address0 = tmp_16_fu_938_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory1_0_V_address0 = tmp_15_fu_923_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory1_0_V_address0 = tmp_14_fu_908_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory1_0_V_address0 = tmp_13_fu_893_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory1_0_V_address0 = tmp_12_fu_878_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory1_0_V_address0 = tmp_11_fu_863_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory1_0_V_address0 = tmp_10_fu_848_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory1_0_V_address0 = tmp_9_fu_833_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory1_0_V_address0 = tmp_8_fu_818_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory1_0_V_address0 = tmp_7_fu_803_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory1_0_V_address0 = tmp_6_fu_788_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        memory1_0_V_address0 = zext_ln203_1_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        memory1_0_V_address0 = zext_ln203_2_fu_734_p1;
    end else begin
        memory1_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        memory1_0_V_ce0 = 1'b1;
    end else begin
        memory1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (trunc_ln203_reg_1104 == 1'd0) & (icmp_ln631_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        memory1_0_V_we0 = 1'b1;
    end else begin
        memory1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        memory1_1_V_address0 = tmp_20_fu_998_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory1_1_V_address0 = tmp_19_fu_983_p3;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory1_1_V_address0 = tmp_18_fu_968_p3;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory1_1_V_address0 = tmp_17_fu_953_p3;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory1_1_V_address0 = tmp_16_fu_938_p3;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory1_1_V_address0 = tmp_15_fu_923_p3;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory1_1_V_address0 = tmp_14_fu_908_p3;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory1_1_V_address0 = tmp_13_fu_893_p3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory1_1_V_address0 = tmp_12_fu_878_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory1_1_V_address0 = tmp_11_fu_863_p3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory1_1_V_address0 = tmp_10_fu_848_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory1_1_V_address0 = tmp_9_fu_833_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory1_1_V_address0 = tmp_8_fu_818_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory1_1_V_address0 = tmp_7_fu_803_p3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory1_1_V_address0 = tmp_6_fu_788_p3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        memory1_1_V_address0 = zext_ln203_1_fu_777_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        memory1_1_V_address0 = zext_ln203_2_fu_734_p1;
    end else begin
        memory1_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        memory1_1_V_ce0 = 1'b1;
    end else begin
        memory1_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd0) & (trunc_ln203_reg_1104 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        memory1_1_V_we0 = 1'b1;
    end else begin
        memory1_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        memory2_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        memory2_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        memory2_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        memory2_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        memory2_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        memory2_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        memory2_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        memory2_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        memory2_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        memory2_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        memory2_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        memory2_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        memory2_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        memory2_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        memory2_V_address0 = 64'd1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln647_fu_752_p2 == 1'd1))) begin
        memory2_V_address0 = 64'd0;
    end else if (((icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        memory2_V_address0 = zext_ln650_fu_764_p1;
    end else begin
        memory2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln647_fu_752_p2 == 1'd1)) | (~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        memory2_V_ce0 = 1'b1;
    end else begin
        memory2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        memory2_V_we0 = 1'b1;
    end else begin
        memory2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13)) | (~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12)))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln628_fu_663_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln630_fu_675_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln631_fu_713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln646_fu_740_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln647_fu_752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln647_fu_752_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if ((~((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln203_fu_729_p2 = (zext_ln631_reg_1108 + zext_ln203_fu_725_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state11 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state12 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state13 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state14 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state15 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state16 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state17 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state18 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state19 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state20 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state21 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state22 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state23 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln631_fu_713_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((icmp_ln647_fu_752_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((res_V_V_full_n == 1'b0) | (data_V_V_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign grp_fu_616_p2 = (($signed(memory1_1_V_q0) > $signed(memory1_0_V_q0)) ? 1'b1 : 1'b0);

assign grp_fu_622_p3 = ((grp_fu_616_p2[0:0] === 1'b1) ? memory1_1_V_q0 : memory1_0_V_q0);

assign grp_fu_630_p2 = (($signed(memory2_V_q0) > $signed(grp_fu_622_p3)) ? 1'b1 : 1'b0);

assign grp_fu_636_p3 = ((grp_fu_630_p2[0:0] === 1'b1) ? memory2_V_q0 : grp_fu_622_p3);

assign grp_fu_648_p2 = (($signed(data_V_V_dout) > $signed(reg_644)) ? 1'b1 : 1'b0);

assign i_fu_669_p2 = (i_0_reg_560 + 6'd1);

assign icmp_ln628_fu_663_p2 = ((i_0_reg_560 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln630_fu_675_p2 = ((j_0_reg_571 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_713_p2 = ((k_0_reg_582 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln646_fu_740_p2 = ((j7_0_reg_593 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln647_fu_752_p2 = ((k8_0_reg_605 == 5'd16) ? 1'b1 : 1'b0);

assign j_1_fu_746_p2 = (j7_0_reg_593 + 6'd1);

assign j_fu_681_p2 = (j_0_reg_571 + 7'd1);

assign k_1_fu_719_p2 = (k_0_reg_582 + 5'd1);

assign k_fu_758_p2 = (k8_0_reg_605 + 5'd1);

assign lshr_ln_fu_691_p4 = {{j_0_reg_571[6:1]}};

assign or_ln203_10_fu_933_p2 = (tmp_5_reg_1137 | 10'd11);

assign or_ln203_11_fu_948_p2 = (tmp_5_reg_1137 | 10'd12);

assign or_ln203_12_fu_963_p2 = (tmp_5_reg_1137 | 10'd13);

assign or_ln203_13_fu_978_p2 = (tmp_5_reg_1137 | 10'd14);

assign or_ln203_14_fu_993_p2 = (tmp_5_reg_1137 | 10'd15);

assign or_ln203_1_fu_798_p2 = (tmp_5_reg_1137 | 10'd2);

assign or_ln203_2_fu_813_p2 = (tmp_5_reg_1137 | 10'd3);

assign or_ln203_3_fu_828_p2 = (tmp_5_reg_1137 | 10'd4);

assign or_ln203_4_fu_843_p2 = (tmp_5_reg_1137 | 10'd5);

assign or_ln203_5_fu_858_p2 = (tmp_5_reg_1137 | 10'd6);

assign or_ln203_6_fu_873_p2 = (tmp_5_reg_1137 | 10'd7);

assign or_ln203_7_fu_888_p2 = (tmp_5_reg_1137 | 10'd8);

assign or_ln203_8_fu_903_p2 = (tmp_5_reg_1137 | 10'd9);

assign or_ln203_9_fu_918_p2 = (tmp_5_reg_1137 | 10'd10);

assign or_ln203_fu_783_p2 = (tmp_5_reg_1137 | 10'd1);

assign res_V_V_din = ((grp_fu_648_p2[0:0] === 1'b1) ? data_V_V_dout : reg_644);

assign start_out = real_start;

assign tmp_10_fu_848_p3 = {{54'd0}, {or_ln203_4_fu_843_p2}};

assign tmp_11_fu_863_p3 = {{54'd0}, {or_ln203_5_fu_858_p2}};

assign tmp_12_fu_878_p3 = {{54'd0}, {or_ln203_6_fu_873_p2}};

assign tmp_13_fu_893_p3 = {{54'd0}, {or_ln203_7_fu_888_p2}};

assign tmp_14_fu_908_p3 = {{54'd0}, {or_ln203_8_fu_903_p2}};

assign tmp_15_fu_923_p3 = {{54'd0}, {or_ln203_9_fu_918_p2}};

assign tmp_16_fu_938_p3 = {{54'd0}, {or_ln203_10_fu_933_p2}};

assign tmp_17_fu_953_p3 = {{54'd0}, {or_ln203_11_fu_948_p2}};

assign tmp_18_fu_968_p3 = {{54'd0}, {or_ln203_12_fu_963_p2}};

assign tmp_19_fu_983_p3 = {{54'd0}, {or_ln203_13_fu_978_p2}};

assign tmp_20_fu_998_p3 = {{54'd0}, {or_ln203_14_fu_993_p2}};

assign tmp_5_fu_769_p3 = {{j7_0_reg_593}, {4'd0}};

assign tmp_6_fu_788_p3 = {{54'd0}, {or_ln203_fu_783_p2}};

assign tmp_7_fu_803_p3 = {{54'd0}, {or_ln203_1_fu_798_p2}};

assign tmp_8_fu_818_p3 = {{54'd0}, {or_ln203_2_fu_813_p2}};

assign tmp_9_fu_833_p3 = {{54'd0}, {or_ln203_3_fu_828_p2}};

assign tmp_fu_701_p3 = {{lshr_ln_fu_691_p4}, {4'd0}};

assign trunc_ln203_fu_687_p1 = j_0_reg_571[0:0];

assign zext_ln203_1_fu_777_p1 = tmp_5_fu_769_p3;

assign zext_ln203_2_fu_734_p1 = add_ln203_fu_729_p2;

assign zext_ln203_fu_725_p1 = k_0_reg_582;

assign zext_ln631_fu_709_p1 = tmp_fu_701_p3;

assign zext_ln650_fu_764_p1 = k8_0_reg_605;

always @ (posedge ap_clk) begin
    zext_ln631_reg_1108[3:0] <= 4'b0000;
    zext_ln631_reg_1108[10] <= 1'b0;
    tmp_5_reg_1137[3:0] <= 4'b0000;
end

endmodule //pooling2d_cl_ss_ap_fixed_ap_fixed_16_5_5_3_0_config6_s
