// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalize_ss_ap_fixed_ap_fixed_16_5_5_3_0_config54_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_din,
        res_V_V_full_n,
        res_V_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_din;
input   res_V_V_full_n;
output   res_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg data_V_V_read;
reg res_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg    res_V_V_blk_n;
wire    ap_CS_fsm_state4;
wire   [10:0] i_fu_1399_p2;
reg   [10:0] i_reg_1712;
wire    ap_CS_fsm_state2;
wire   [5:0] trunc_ln97_fu_1405_p1;
reg   [5:0] trunc_ln97_reg_1717;
wire   [0:0] icmp_ln85_fu_1393_p2;
reg   [15:0] out_data_V_reg_1723;
reg   [10:0] i_0_reg_351;
reg    ap_block_state1;
wire  signed [15:0] mul_ln1265_fu_463_p0;
wire  signed [15:0] mul_ln1265_fu_463_p1;
wire   [15:0] tmp_9_fu_1409_p66;
wire   [15:0] p_Val2_s_fu_1552_p66;
wire   [26:0] rhs_V_fu_1685_p3;
wire   [26:0] mul_ln1265_fu_463_p2;
wire   [26:0] ret_V_fu_1693_p2;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

myproject_mux_646_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 16 ))
myproject_mux_646_16_1_1_U355(
    .din0(16'd31358),
    .din1(16'd14956),
    .din2(16'd21996),
    .din3(16'd28070),
    .din4(16'd28124),
    .din5(16'd23339),
    .din6(16'd34795),
    .din7(16'd14261),
    .din8(16'd12624),
    .din9(16'd16623),
    .din10(16'd9701),
    .din11(16'd26191),
    .din12(16'd11418),
    .din13(16'd25376),
    .din14(16'd34753),
    .din15(16'd13868),
    .din16(16'd15102),
    .din17(16'd39397),
    .din18(16'd15613),
    .din19(16'd36181),
    .din20(16'd14687),
    .din21(16'd48172),
    .din22(16'd17110),
    .din23(16'd25660),
    .din24(16'd36971),
    .din25(16'd31116),
    .din26(16'd12409),
    .din27(16'd20684),
    .din28(16'd11800),
    .din29(16'd24015),
    .din30(16'd15454),
    .din31(16'd26185),
    .din32(16'd13420),
    .din33(16'd15662),
    .din34(16'd14733),
    .din35(16'd23305),
    .din36(16'd22869),
    .din37(16'd23921),
    .din38(16'd13601),
    .din39(16'd13932),
    .din40(16'd42698),
    .din41(16'd19947),
    .din42(16'd11540),
    .din43(16'd11963),
    .din44(16'd23286),
    .din45(16'd16550),
    .din46(16'd25098),
    .din47(16'd20984),
    .din48(16'd34515),
    .din49(16'd24042),
    .din50(16'd26158),
    .din51(16'd40138),
    .din52(16'd14333),
    .din53(16'd24910),
    .din54(16'd18187),
    .din55(16'd25681),
    .din56(16'd31954),
    .din57(16'd25521),
    .din58(16'd24268),
    .din59(16'd26018),
    .din60(16'd15623),
    .din61(16'd21073),
    .din62(16'd14148),
    .din63(16'd25807),
    .din64(trunc_ln97_reg_1717),
    .dout(tmp_9_fu_1409_p66)
);

myproject_mux_646_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 16 ),
    .din11_WIDTH( 16 ),
    .din12_WIDTH( 16 ),
    .din13_WIDTH( 16 ),
    .din14_WIDTH( 16 ),
    .din15_WIDTH( 16 ),
    .din16_WIDTH( 16 ),
    .din17_WIDTH( 16 ),
    .din18_WIDTH( 16 ),
    .din19_WIDTH( 16 ),
    .din20_WIDTH( 16 ),
    .din21_WIDTH( 16 ),
    .din22_WIDTH( 16 ),
    .din23_WIDTH( 16 ),
    .din24_WIDTH( 16 ),
    .din25_WIDTH( 16 ),
    .din26_WIDTH( 16 ),
    .din27_WIDTH( 16 ),
    .din28_WIDTH( 16 ),
    .din29_WIDTH( 16 ),
    .din30_WIDTH( 16 ),
    .din31_WIDTH( 16 ),
    .din32_WIDTH( 16 ),
    .din33_WIDTH( 16 ),
    .din34_WIDTH( 16 ),
    .din35_WIDTH( 16 ),
    .din36_WIDTH( 16 ),
    .din37_WIDTH( 16 ),
    .din38_WIDTH( 16 ),
    .din39_WIDTH( 16 ),
    .din40_WIDTH( 16 ),
    .din41_WIDTH( 16 ),
    .din42_WIDTH( 16 ),
    .din43_WIDTH( 16 ),
    .din44_WIDTH( 16 ),
    .din45_WIDTH( 16 ),
    .din46_WIDTH( 16 ),
    .din47_WIDTH( 16 ),
    .din48_WIDTH( 16 ),
    .din49_WIDTH( 16 ),
    .din50_WIDTH( 16 ),
    .din51_WIDTH( 16 ),
    .din52_WIDTH( 16 ),
    .din53_WIDTH( 16 ),
    .din54_WIDTH( 16 ),
    .din55_WIDTH( 16 ),
    .din56_WIDTH( 16 ),
    .din57_WIDTH( 16 ),
    .din58_WIDTH( 16 ),
    .din59_WIDTH( 16 ),
    .din60_WIDTH( 16 ),
    .din61_WIDTH( 16 ),
    .din62_WIDTH( 16 ),
    .din63_WIDTH( 16 ),
    .din64_WIDTH( 6 ),
    .dout_WIDTH( 16 ))
myproject_mux_646_16_1_1_U356(
    .din0(16'd63369),
    .din1(16'd63205),
    .din2(16'd63656),
    .din3(16'd61948),
    .din4(16'd64205),
    .din5(16'd64035),
    .din6(16'd63916),
    .din7(16'd1072),
    .din8(16'd5520),
    .din9(16'd1583),
    .din10(16'd62400),
    .din11(16'd63809),
    .din12(16'd2803),
    .din13(16'd63702),
    .din14(16'd64017),
    .din15(16'd376),
    .din16(16'd65352),
    .din17(16'd63600),
    .din18(16'd63118),
    .din19(16'd63028),
    .din20(16'd2858),
    .din21(16'd63382),
    .din22(16'd63272),
    .din23(16'd62352),
    .din24(16'd63583),
    .din25(16'd63707),
    .din26(16'd1423),
    .din27(16'd64109),
    .din28(16'd2441),
    .din29(16'd64257),
    .din30(16'd65518),
    .din31(16'd63784),
    .din32(16'd63790),
    .din33(16'd917),
    .din34(16'd65373),
    .din35(16'd62764),
    .din36(16'd63623),
    .din37(16'd63788),
    .din38(16'd991),
    .din39(16'd836),
    .din40(16'd63192),
    .din41(16'd63942),
    .din42(16'd65112),
    .din43(16'd2521),
    .din44(16'd63213),
    .din45(16'd61103),
    .din46(16'd63988),
    .din47(16'd64005),
    .din48(16'd63023),
    .din49(16'd63988),
    .din50(16'd63674),
    .din51(16'd63530),
    .din52(16'd61271),
    .din53(16'd63917),
    .din54(16'd63956),
    .din55(16'd63106),
    .din56(16'd62194),
    .din57(16'd64025),
    .din58(16'd63703),
    .din59(16'd63830),
    .din60(16'd1740),
    .din61(16'd64027),
    .din62(16'd64791),
    .din63(16'd63854),
    .din64(trunc_ln97_reg_1717),
    .dout(p_Val2_s_fu_1552_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_351 <= i_reg_1712;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_351 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1712 <= i_fu_1399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_data_V_reg_1723 <= {{ret_V_fu_1693_p2[26:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_1393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln97_reg_1717 <= trunc_ln97_fu_1405_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        res_V_V_blk_n = res_V_V_full_n;
    end else begin
        res_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        res_V_V_write = 1'b1;
    end else begin
        res_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln85_fu_1393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((res_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign i_fu_1399_p2 = (i_0_reg_351 + 11'd1);

assign icmp_ln85_fu_1393_p2 = ((i_0_reg_351 == 11'd1024) ? 1'b1 : 1'b0);

assign mul_ln1265_fu_463_p0 = tmp_9_fu_1409_p66;

assign mul_ln1265_fu_463_p1 = data_V_V_dout;

assign mul_ln1265_fu_463_p2 = ($signed(mul_ln1265_fu_463_p0) * $signed(mul_ln1265_fu_463_p1));

assign res_V_V_din = out_data_V_reg_1723;

assign ret_V_fu_1693_p2 = (rhs_V_fu_1685_p3 + mul_ln1265_fu_463_p2);

assign rhs_V_fu_1685_p3 = {{p_Val2_s_fu_1552_p66}, {11'd0}};

assign start_out = real_start;

assign trunc_ln97_fu_1405_p1 = i_0_reg_351[5:0];

endmodule //normalize_ss_ap_fixed_ap_fixed_16_5_5_3_0_config54_s
