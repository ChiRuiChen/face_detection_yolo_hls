// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yolo_decode_ss_ap_fixed_ap_fixed_5ul_4ul_4ul_2ul_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_TDATA,
        res_V_V_TVALID,
        res_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_TDATA;
output   res_V_V_TVALID;
input   res_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln29_fu_335_p2;
reg    res_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire   [2:0] i_fu_279_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln22_fu_273_p2;
wire   [2:0] row_fu_301_p2;
reg   [2:0] row_reg_548;
wire    ap_CS_fsm_state3;
wire   [14:0] zext_ln731_fu_319_p1;
reg   [14:0] zext_ln731_reg_553;
wire   [0:0] icmp_ln26_fu_295_p2;
wire   [2:0] col_fu_329_p2;
reg   [2:0] col_reg_561;
wire    ap_CS_fsm_state4;
wire   [2:0] k_fu_341_p2;
reg    ap_block_state5;
wire   [0:0] and_ln32_fu_367_p2;
reg   [0:0] and_ln32_reg_574;
wire    ap_CS_fsm_state6;
wire   [1:0] trunc_ln731_1_fu_380_p1;
reg   [1:0] trunc_ln731_1_reg_578;
wire   [2:0] i_1_fu_469_p2;
reg   [2:0] i_1_reg_586;
wire    ap_CS_fsm_state9;
wire    regslice_both_res_V_V_U_apdone_blk;
wire   [0:0] icmp_ln43_fu_463_p2;
wire   [15:0] decode_V_q1;
reg   [2:0] grid_buffer_V_address0;
reg    grid_buffer_V_ce0;
reg    grid_buffer_V_we0;
wire   [15:0] grid_buffer_V_q0;
reg   [2:0] grid_buffer_V_address1;
reg    grid_buffer_V_ce1;
wire   [15:0] grid_buffer_V_q1;
reg   [2:0] decode_V_address0;
reg    decode_V_ce0;
reg    decode_V_we0;
reg   [15:0] decode_V_d0;
reg   [2:0] decode_V_address1;
reg    decode_V_ce1;
reg    decode_V_we1;
reg   [15:0] decode_V_d1;
reg   [2:0] i_0_reg_217;
reg    ap_block_state1;
reg   [2:0] p_Val2_4_reg_228;
wire   [0:0] icmp_ln27_fu_323_p2;
reg   [2:0] p_Val2_2_reg_239;
wire    ap_CS_fsm_state8;
reg   [2:0] k_0_reg_251;
reg   [2:0] i2_0_reg_262;
wire   [63:0] zext_ln23_fu_285_p1;
wire   [63:0] zext_ln30_fu_347_p1;
wire   [63:0] zext_ln44_fu_475_p1;
reg   [15:0] best_conf_V_fu_88;
wire   [15:0] shl_ln731_fu_373_p2;
wire    ap_CS_fsm_state7;
wire  signed [15:0] r_V_fu_420_p1;
wire  signed [15:0] r_V_1_fu_444_p1;
wire   [15:0] shl_ln731_3_fu_449_p2;
wire   [15:0] shl_ln731_4_fu_456_p2;
wire   [1:0] trunc_ln731_fu_307_p1;
wire   [12:0] shl_ln731_1_fu_311_p3;
wire   [0:0] icmp_ln1494_fu_355_p2;
wire   [0:0] icmp_ln1494_1_fu_361_p2;
wire   [12:0] shl_ln731_2_fu_389_p3;
wire   [14:0] zext_ln731_1_fu_396_p1;
wire   [14:0] trunc_ln731_2_fu_400_p1;
wire   [14:0] add_ln731_fu_404_p2;
wire   [13:0] trunc_ln1_fu_410_p4;
wire   [14:0] trunc_ln731_3_fu_425_p1;
wire   [14:0] add_ln731_1_fu_429_p2;
wire   [13:0] trunc_ln1148_1_fu_434_p4;
reg   [10:0] ap_NS_fsm;
reg    res_V_V_TVALID_int;
wire    res_V_V_TREADY_int;
wire    regslice_both_res_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 11'd1;
end

yolo_decode_ss_ap_fixed_ap_fixed_5ul_4ul_4ul_2ul_s_grid_bOgC #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
grid_buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grid_buffer_V_address0),
    .ce0(grid_buffer_V_ce0),
    .we0(grid_buffer_V_we0),
    .d0(data_V_V_dout),
    .q0(grid_buffer_V_q0),
    .address1(grid_buffer_V_address1),
    .ce1(grid_buffer_V_ce1),
    .q1(grid_buffer_V_q1)
);

yolo_decode_ss_ap_fixed_ap_fixed_5ul_4ul_4ul_2ul_s_decode_V #(
    .DataWidth( 16 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
decode_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(decode_V_address0),
    .ce0(decode_V_ce0),
    .we0(decode_V_we0),
    .d0(decode_V_d0),
    .address1(decode_V_address1),
    .ce1(decode_V_ce1),
    .we1(decode_V_we1),
    .d1(decode_V_d1),
    .q1(decode_V_q1)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(decode_V_q1),
    .vld_in(res_V_V_TVALID_int),
    .ack_in(res_V_V_TREADY_int),
    .data_out(res_V_V_TDATA),
    .vld_out(regslice_both_res_V_V_U_vld_out),
    .ack_out(res_V_V_TREADY),
    .apdone_blk(regslice_both_res_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln43_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln32_fu_367_p2) & (1'b1 == ap_CS_fsm_state6))) begin
        best_conf_V_fu_88 <= grid_buffer_V_q0;
    end else if (((icmp_ln22_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        best_conf_V_fu_88 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i2_0_reg_262 <= 3'd0;
    end else if (((res_V_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        i2_0_reg_262 <= i_1_reg_586;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_217 <= i_fu_279_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_217 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_323_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_251 <= 3'd0;
    end else if ((~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k_0_reg_251 <= k_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_2_reg_239 <= col_reg_561;
    end else if (((icmp_ln26_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_2_reg_239 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_4_reg_228 <= row_reg_548;
    end else if (((icmp_ln22_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_4_reg_228 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln32_reg_574 <= and_ln32_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        col_reg_561 <= col_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
        i_1_reg_586 <= i_1_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_548 <= row_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln32_fu_367_p2) & (1'b1 == ap_CS_fsm_state6))) begin
        trunc_ln731_1_reg_578 <= trunc_ln731_1_fu_380_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln731_reg_553[12 : 11] <= zext_ln731_fu_319_p1[12 : 11];
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln43_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        decode_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        decode_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decode_V_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        decode_V_address0 = zext_ln23_fu_285_p1;
    end else begin
        decode_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        decode_V_address1 = zext_ln44_fu_475_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        decode_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        decode_V_address1 = 64'd2;
    end else begin
        decode_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        decode_V_ce0 = 1'b1;
    end else begin
        decode_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0)))) begin
        decode_V_ce1 = 1'b1;
    end else begin
        decode_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        decode_V_d0 = shl_ln731_4_fu_456_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        decode_V_d0 = r_V_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        decode_V_d0 = shl_ln731_fu_373_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        decode_V_d0 = 16'd0;
    end else begin
        decode_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        decode_V_d1 = shl_ln731_3_fu_449_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        decode_V_d1 = r_V_1_fu_444_p1;
    end else begin
        decode_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((icmp_ln22_fu_273_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((1'd1 == and_ln32_reg_574) & (1'b1 == ap_CS_fsm_state8)) | ((1'd1 == and_ln32_fu_367_p2) & (1'b1 == ap_CS_fsm_state6)))) begin
        decode_V_we0 = 1'b1;
    end else begin
        decode_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'd1 == and_ln32_reg_574) & (1'b1 == ap_CS_fsm_state8)))) begin
        decode_V_we1 = 1'b1;
    end else begin
        decode_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grid_buffer_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grid_buffer_V_address0 = 64'd2;
    end else if (((icmp_ln29_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        grid_buffer_V_address0 = 64'd6;
    end else if (((icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        grid_buffer_V_address0 = zext_ln30_fu_347_p1;
    end else begin
        grid_buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grid_buffer_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grid_buffer_V_address1 = 64'd3;
    end else begin
        grid_buffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | (~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5)))) begin
        grid_buffer_V_ce0 = 1'b1;
    end else begin
        grid_buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        grid_buffer_V_ce1 = 1'b1;
    end else begin
        grid_buffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        grid_buffer_V_we0 = 1'b1;
    end else begin
        grid_buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        res_V_V_TDATA_blk_n = res_V_V_TREADY_int;
    end else begin
        res_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((res_V_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        res_V_V_TVALID_int = 1'b1;
    end else begin
        res_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_273_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln27_fu_323_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)) & (icmp_ln29_fu_335_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'd0 == and_ln32_fu_367_p2) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln43_fu_463_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln43_fu_463_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (regslice_both_res_V_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((res_V_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((res_V_V_TREADY_int == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln731_1_fu_429_p2 = (zext_ln731_reg_553 + trunc_ln731_3_fu_425_p1);

assign add_ln731_fu_404_p2 = (zext_ln731_1_fu_396_p1 + trunc_ln731_2_fu_400_p1);

assign and_ln32_fu_367_p2 = (icmp_ln1494_fu_355_p2 & icmp_ln1494_1_fu_361_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state5 = ((icmp_ln29_fu_335_p2 == 1'd0) & (data_V_V_empty_n == 1'b0));
end

assign col_fu_329_p2 = (p_Val2_2_reg_239 + 3'd1);

assign i_1_fu_469_p2 = (i2_0_reg_262 + 3'd1);

assign i_fu_279_p2 = (i_0_reg_217 + 3'd1);

assign icmp_ln1494_1_fu_361_p2 = (($signed(grid_buffer_V_q0) > $signed(best_conf_V_fu_88)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_355_p2 = (($signed(grid_buffer_V_q0) > $signed(16'd1024)) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_273_p2 = ((i_0_reg_217 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_295_p2 = ((p_Val2_4_reg_228 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_323_p2 = ((p_Val2_2_reg_239 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_335_p2 = ((k_0_reg_251 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_463_p2 = ((i2_0_reg_262 == 3'd5) ? 1'b1 : 1'b0);

assign k_fu_341_p2 = (k_0_reg_251 + 3'd1);

assign r_V_1_fu_444_p1 = $signed(trunc_ln1148_1_fu_434_p4);

assign r_V_fu_420_p1 = $signed(trunc_ln1_fu_410_p4);

assign res_V_V_TVALID = regslice_both_res_V_V_U_vld_out;

assign row_fu_301_p2 = (p_Val2_4_reg_228 + 3'd1);

assign shl_ln731_1_fu_311_p3 = {{trunc_ln731_fu_307_p1}, {11'd0}};

assign shl_ln731_2_fu_389_p3 = {{trunc_ln731_1_reg_578}, {11'd0}};

assign shl_ln731_3_fu_449_p2 = grid_buffer_V_q1 << 16'd1;

assign shl_ln731_4_fu_456_p2 = grid_buffer_V_q0 << 16'd1;

assign shl_ln731_fu_373_p2 = grid_buffer_V_q0 << 16'd1;

assign trunc_ln1148_1_fu_434_p4 = {{add_ln731_1_fu_429_p2[14:1]}};

assign trunc_ln1_fu_410_p4 = {{add_ln731_fu_404_p2[14:1]}};

assign trunc_ln731_1_fu_380_p1 = p_Val2_2_reg_239[1:0];

assign trunc_ln731_2_fu_400_p1 = grid_buffer_V_q0[14:0];

assign trunc_ln731_3_fu_425_p1 = grid_buffer_V_q1[14:0];

assign trunc_ln731_fu_307_p1 = p_Val2_4_reg_228[1:0];

assign zext_ln23_fu_285_p1 = i_0_reg_217;

assign zext_ln30_fu_347_p1 = k_0_reg_251;

assign zext_ln44_fu_475_p1 = i2_0_reg_262;

assign zext_ln731_1_fu_396_p1 = shl_ln731_2_fu_389_p3;

assign zext_ln731_fu_319_p1 = shl_ln731_1_fu_311_p3;

always @ (posedge ap_clk) begin
    zext_ln731_reg_553[10:0] <= 11'b00000000000;
    zext_ln731_reg_553[14:13] <= 2'b00;
end

endmodule //yolo_decode_ss_ap_fixed_ap_fixed_5ul_4ul_4ul_2ul_s
